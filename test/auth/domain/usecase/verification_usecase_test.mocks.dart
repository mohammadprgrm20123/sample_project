// Mocks generated by Mockito 5.4.2 from annotations
// in sample_project/test/auth/domain/usecase/verification_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sample_project/core/domain/failure_entity.dart' as _i5;
import 'package:sample_project/features/authentication/%20verification/data/model/verification_dto.dart'
    as _i7;
import 'package:sample_project/features/authentication/%20verification/domain/entity/user_entity.dart'
    as _i6;
import 'package:sample_project/features/authentication/%20verification/domain/verification_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VerificationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVerificationRepository extends _i1.Mock
    implements _i3.VerificationRepository {
  MockVerificationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.FailureEntity, _i6.UserEntity>> verification(
          _i7.VerficationDto? dto) =>
      (super.noSuchMethod(
        Invocation.method(
          #verification,
          [dto],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.FailureEntity, _i6.UserEntity>>.value(
                _FakeEither_0<_i5.FailureEntity, _i6.UserEntity>(
          this,
          Invocation.method(
            #verification,
            [dto],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.FailureEntity, _i6.UserEntity>>);
}
